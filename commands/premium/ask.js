const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const axios = require('axios');

module.exports = {
    category: 'Premium',
    data: new SlashCommandBuilder()
        .setName('ask')
        .setDescription('ü§ñ Posez une question √† l\'IA / Ask a question to AI')
        .setDescriptionLocalizations({
            'en-US': 'ü§ñ Ask a question to AI',
            'es-ES': 'ü§ñ Hacer una pregunta a la IA'
        })
        .addStringOption(option =>
            option.setName('question')
                .setDescription('Votre question pour l\'IA')
                .setDescriptionLocalizations({
                    'en-US': 'Your question for the AI',
                    'es-ES': 'Tu pregunta para la IA'
                })
                .setRequired(true)
                .setMaxLength(2000)
        )
        .addStringOption(option =>
            option.setName('model')
                .setDescription('Mod√®le d\'IA √† utiliser')
                .setDescriptionLocalizations({
                    'en-US': 'AI model to use',
                    'es-ES': 'Modelo de IA a usar'
                })
                .addChoices(
                    { name: 'GPT-3.5 Turbo (Recommand√©)', value: 'gpt-3.5-turbo' },
                    { name: 'GPT-4o Mini (Rapide)', value: 'gpt-4o-mini' },
                    { name: 'Claude-3 Sonnet', value: 'claude-3-sonnet' },
                    { name: 'Gemini Pro', value: 'gemini-pro' }
                )
                .setRequired(false)
        )
        .addBooleanOption(option =>
            option.setName('private')
                .setDescription('R√©ponse visible uniquement par vous')
                .setDescriptionLocalizations({
                    'en-US': 'Response visible only to you',
                    'es-ES': 'Respuesta visible solo para ti'
                })
                .setRequired(false)
        ),
    
    async execute(interaction, client, getTranslation) {
        await interaction.deferReply({ ephemeral: interaction.options.getBoolean('private') || false });
        
        const question = interaction.options.getString('question');
        const model = interaction.options.getString('model') || 'gpt-3.5-turbo';
        const isPrivate = interaction.options.getBoolean('private') || false;
        
        // V√©rifier si les fonctionnalit√©s IA sont activ√©es
        if (!process.env.OPENAI_API_KEY && !process.env.ANTHROPIC_API_KEY && !process.env.GOOGLE_API_KEY) {
            const errorEmbed = new EmbedBuilder()
                .setTitle('‚ùå Fonctionnalit√©s IA d√©sactiv√©es')
                .setDescription('Les fonctionnalit√©s d\'intelligence artificielle ne sont pas configur√©es sur ce bot.')
                .addFields({
                    name: 'üí° Information',
                    value: 'Contactez l\'administrateur du bot pour activer ces fonctionnalit√©s.'
                })
                .setColor('#ff6b6b')
                .setTimestamp();
            
            return await interaction.editReply({ embeds: [errorEmbed] });
        }
        
        // Cr√©er le message de chargement
        const loadingEmbed = new EmbedBuilder()
            .setTitle('ü§ñ IA en cours de r√©flexion...')
            .setDescription(`**Question:** ${question}\n**Mod√®le:** ${model}`)
            .addFields({
                name: '‚è≥ Statut',
                value: 'üîÑ G√©n√©ration de la r√©ponse en cours...'
            })
            .setColor('#ffaa00')
            .setTimestamp();
        
        await interaction.editReply({ embeds: [loadingEmbed] });
        
        try {
            let response;
            const startTime = Date.now();
            
            // Pr√©parer le contexte syst√®me
            const systemPrompt = `Tu es YAKO, un assistant IA amical, intelligent et serviable. Tu r√©ponds TOUJOURS aux questions, m√™me les plus simples ou personnelles. Tu peux parler de tout : comment tu vas, ton √¢ge, ton nom, tes go√ªts, etc. Sois cr√©atif et engageant dans tes r√©ponses. Tu as une personnalit√© chaleureuse et tu aimes aider les utilisateurs. R√©ponds dans la m√™me langue que la question pos√©e.`;
            
            // Appeler l'API selon le mod√®le choisi
            if (model.startsWith('gpt')) {
                const openaiResponse = await axios.post('https://api.openai.com/v1/chat/completions', {
                    model: model,
                    messages: [
                        { role: 'system', content: systemPrompt },
                        { role: 'user', content: question }
                    ],
                    max_tokens: 2000,
                    temperature: 0.7
                }, {
                    headers: {
                        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
                        'Content-Type': 'application/json'
                    },
                    timeout: 30000
                });
                
                response = openaiResponse.data.choices[0].message.content;
            } else if (model.startsWith('claude')) {
                const anthropicResponse = await axios.post('https://api.anthropic.com/v1/messages', {
                    model: 'claude-3-sonnet-20240229',
                    max_tokens: 2000,
                    messages: [
                        { role: 'user', content: `${systemPrompt}\n\nQuestion: ${question}` }
                    ]
                }, {
                    headers: {
                        'x-api-key': process.env.ANTHROPIC_API_KEY,
                        'Content-Type': 'application/json',
                        'anthropic-version': '2023-06-01'
                    },
                    timeout: 30000
                });
                
                response = anthropicResponse.data.content[0].text;
            } else if (model.startsWith('gemini')) {
                const geminiResponse = await axios.post(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${process.env.GOOGLE_API_KEY}`, {
                    contents: [{
                        parts: [{
                            text: `${systemPrompt}\n\nQuestion: ${question}`
                        }]
                    }]
                }, {
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    timeout: 30000
                });
                
                response = geminiResponse.data.candidates[0].content.parts[0].text;
            }
            
            const endTime = Date.now();
            const responseTime = endTime - startTime;
            
            // Diviser la r√©ponse si elle est trop longue
            const chunks = [];
            if (response.length <= 1800) {
                chunks.push(response);
            } else {
                for (let i = 0; i < response.length; i += 1800) {
                    chunks.push(response.slice(i, i + 1800));
                }
            }
            
            // Cr√©er le message de r√©ponse principal
            const responseEmbed = new EmbedBuilder()
                .setTitle('ü§ñ R√©ponse de l\'IA')
                .setDescription(`**Question:** ${question}\n**Mod√®le:** ${model} ‚Ä¢ **Temps:** ${responseTime}ms`)
                .addFields({
                    name: 'üí¨ R√©ponse',
                    value: chunks[0]
                })
                .setColor('#51cf66')
                .setTimestamp();
            
            await interaction.editReply({ embeds: [responseEmbed], ephemeral: isPrivate });
            
            // Envoyer les chunks suppl√©mentaires si n√©cessaire
            if (chunks.length > 1) {
                for (let i = 1; i < chunks.length; i++) {
                    const followUpEmbed = new EmbedBuilder()
                        .setDescription(chunks[i])
                        .setColor('#51cf66');
                    
                    await interaction.followUp({ embeds: [followUpEmbed], ephemeral: isPrivate });
                }
            }
            
        } catch (error) {
            console.error('Erreur lors de l\'appel √† l\'API IA:', error);
            
            let errorTitle = '‚ùå Erreur de l\'IA';
            let errorDescription = 'Une erreur est survenue lors de la g√©n√©ration de la r√©ponse.';
            
            if (error.response) {
                if (error.response.status === 401) {
                    errorTitle = 'üîë Erreur d\'authentification';
                    errorDescription = 'Cl√© API invalide ou expir√©e.';
                } else if (error.response.status === 429) {
                    errorTitle = '‚è∞ Limite de taux atteinte';
                    errorDescription = 'Trop de requ√™tes. Veuillez r√©essayer dans quelques minutes.';
                } else if (error.response.status === 500) {
                    errorTitle = 'üîß Erreur du serveur IA';
                    errorDescription = 'Le service IA rencontre des difficult√©s techniques.';
                }
            } else if (error.code === 'ECONNABORTED') {
                errorTitle = '‚è±Ô∏è Timeout';
                errorDescription = 'La requ√™te a pris trop de temps. Veuillez r√©essayer.';
            }
            
            const errorEmbed = new EmbedBuilder()
                .setTitle(errorTitle)
                .setDescription(errorDescription)
                .addFields(
                    {
                        name: 'üîß D√©tails techniques',
                        value: `**Mod√®le:** ${model}\n**Erreur:** ${error.message || 'Erreur inconnue'}`
                    },
                    {
                        name: 'üí° Solutions',
                        value: '‚Ä¢ V√©rifiez votre question\n‚Ä¢ Essayez un autre mod√®le\n‚Ä¢ R√©essayez dans quelques minutes'
                    }
                )
                .setColor('#ff6b6b')
                .setTimestamp();
            
            await interaction.editReply({ embeds: [errorEmbed] });
        }
    }
};