const { EmbedBuilder, Colors } = require('discord.js');
const DatabaseManager = require('./database');

class Logger {
    /**
     * Types de logs disponibles
     */
    static LogTypes = {
        MODERATION: 'moderation',
        ADMIN: 'admin',
        USER: 'user',
        SYSTEM: 'system',
        ERROR: 'error',
        WARNING: 'warning',
        INFO: 'info'
    };

    /**
     * Couleurs pour chaque type de log
     */
    static LogColors = {
        [this.LogTypes.MODERATION]: Colors.Red,
        [this.LogTypes.ADMIN]: Colors.Orange,
        [this.LogTypes.USER]: Colors.Blue,
        [this.LogTypes.SYSTEM]: Colors.Green,
        [this.LogTypes.ERROR]: Colors.DarkRed,
        [this.LogTypes.WARNING]: Colors.Yellow,
        [this.LogTypes.INFO]: Colors.Blurple
    };

    /**
     * Ic√¥nes pour chaque type de log
     */
    static LogIcons = {
        [this.LogTypes.MODERATION]: 'üî®',
        [this.LogTypes.ADMIN]: '‚öôÔ∏è',
        [this.LogTypes.USER]: 'üë§',
        [this.LogTypes.SYSTEM]: 'ü§ñ',
        [this.LogTypes.ERROR]: '‚ùå',
        [this.LogTypes.WARNING]: '‚ö†Ô∏è',
        [this.LogTypes.INFO]: '‚ÑπÔ∏è'
    };

    /**
     * Envoie un log dans le canal de logs configur√©
     * @param {Guild} guild - Le serveur Discord
     * @param {string} type - Type de log (voir LogTypes)
     * @param {string} title - Titre du log
     * @param {string} description - Description du log
     * @param {Object} options - Options suppl√©mentaires
     * @param {User} options.user - Utilisateur concern√©
     * @param {User} options.moderator - Mod√©rateur qui a effectu√© l'action
     * @param {string} options.reason - Raison de l'action
     * @param {string} options.duration - Dur√©e (pour les sanctions temporaires)
     * @param {Object} options.fields - Champs suppl√©mentaires
     * @param {string} options.footer - Texte du footer
     * @param {string} options.thumbnail - URL de la miniature
     * @param {string} options.image - URL de l'image
     */
    static async log(guild, type, title, description, options = {}) {
        try {
            // R√©cup√©rer la configuration du serveur
            const guildConfig = await DatabaseManager.getGuildConfig(guild.id);
            if (!guildConfig || !guildConfig.logChannelId) {
                return; // Pas de canal de logs configur√©
            }

            // R√©cup√©rer le canal de logs
            const logChannel = guild.channels.cache.get(guildConfig.logChannelId);
            if (!logChannel) {
                console.warn(`Canal de logs introuvable pour le serveur ${guild.name} (${guild.id})`);
                return;
            }

            // Cr√©er l'embed
            const embed = new EmbedBuilder()
                .setColor(this.LogColors[type] || Colors.Blurple)
                .setTitle(`${this.LogIcons[type] || 'üìù'} ${title}`)
                .setDescription(description)
                .setTimestamp();

            // Ajouter les champs standard
            if (options.user) {
                embed.addFields({
                    name: 'üë§ Utilisateur',
                    value: `${options.user.tag} (${options.user.id})`,
                    inline: true
                });
            }

            if (options.moderator) {
                embed.addFields({
                    name: 'üõ°Ô∏è Mod√©rateur',
                    value: `${options.moderator.tag} (${options.moderator.id})`,
                    inline: true
                });
            }

            if (options.reason) {
                embed.addFields({
                    name: 'üìù Raison',
                    value: options.reason,
                    inline: false
                });
            }

            if (options.duration) {
                embed.addFields({
                    name: '‚è±Ô∏è Dur√©e',
                    value: options.duration,
                    inline: true
                });
            }

            // Ajouter les champs personnalis√©s
            if (options.fields && Array.isArray(options.fields)) {
                embed.addFields(...options.fields);
            }

            // Ajouter footer, thumbnail, image
            if (options.footer) {
                embed.setFooter({ text: options.footer });
            }

            if (options.thumbnail) {
                embed.setThumbnail(options.thumbnail);
            }

            if (options.image) {
                embed.setImage(options.image);
            }

            // Envoyer le log
            await logChannel.send({ embeds: [embed] });

        } catch (error) {
            console.error('Erreur lors de l\'envoi du log:', error);
        }
    }

    /**
     * Log pour les actions de mod√©ration
     */
    static async logModeration(guild, action, user, moderator, reason, duration = null) {
        const actionNames = {
            ban: 'Bannissement',
            kick: 'Expulsion',
            mute: 'Mise en sourdine',
            unmute: 'Retrait de sourdine',
            warn: 'Avertissement',
            unwarn: 'Retrait d\'avertissement',
            clear: 'Suppression de messages'
        };

        const actionName = actionNames[action] || action;
        const description = `Action de mod√©ration effectu√©e: **${actionName}**`;

        await this.log(guild, this.LogTypes.MODERATION, actionName, description, {
            user,
            moderator,
            reason,
            duration,
            thumbnail: user.displayAvatarURL()
        });
    }

    /**
     * Log pour les actions administratives
     */
    static async logAdmin(guild, action, moderator, details) {
        const description = `Action administrative effectu√©e: **${action}**`;

        await this.log(guild, this.LogTypes.ADMIN, action, description, {
            moderator,
            fields: details ? [{ name: 'D√©tails', value: details, inline: false }] : undefined
        });
    }

    /**
     * Log pour les erreurs syst√®me
     */
    static async logError(guild, error, context = '') {
        const description = `Une erreur syst√®me s'est produite${context ? ` dans ${context}` : ''}`;

        await this.log(guild, this.LogTypes.ERROR, 'Erreur Syst√®me', description, {
            fields: [
                { name: 'Erreur', value: error.message || error, inline: false },
                { name: 'Contexte', value: context || 'Non sp√©cifi√©', inline: true }
            ],
            footer: 'V√©rifiez les logs du serveur pour plus de d√©tails'
        });
    }

    /**
     * Log pour les √©v√©nements utilisateur
     */
    static async logUser(guild, event, user, details = '') {
        const eventNames = {
            join: 'Arriv√©e',
            leave: 'D√©part',
            update: 'Mise √† jour du profil',
            role_add: 'R√¥le ajout√©',
            role_remove: 'R√¥le retir√©'
        };

        const eventName = eventNames[event] || event;
        const description = `√âv√©nement utilisateur: **${eventName}**`;

        await this.log(guild, this.LogTypes.USER, eventName, description, {
            user,
            fields: details ? [{ name: 'D√©tails', value: details, inline: false }] : undefined,
            thumbnail: user.displayAvatarURL()
        });
    }

    /**
     * Log pour les informations syst√®me
     */
    static async logInfo(guild, title, message, fields = []) {
        await this.log(guild, this.LogTypes.INFO, title, message, {
            fields
        });
    }

    /**
     * Log pour les avertissements
     */
    static async logWarning(guild, title, message, details = '') {
        await this.log(guild, this.LogTypes.WARNING, title, message, {
            fields: details ? [{ name: 'D√©tails', value: details, inline: false }] : undefined
        });
    }

    /**
     * Formate une dur√©e en texte lisible
     * @param {number} milliseconds - Dur√©e en millisecondes
     * @returns {string} - Dur√©e format√©e
     */
    static formatDuration(milliseconds) {
        if (!milliseconds) return 'Permanent';

        const seconds = Math.floor(milliseconds / 1000);
        const minutes = Math.floor(seconds / 60);
        const hours = Math.floor(minutes / 60);
        const days = Math.floor(hours / 24);

        if (days > 0) {
            return `${days} jour${days > 1 ? 's' : ''}`;
        } else if (hours > 0) {
            return `${hours} heure${hours > 1 ? 's' : ''}`;
        } else if (minutes > 0) {
            return `${minutes} minute${minutes > 1 ? 's' : ''}`;
        } else {
            return `${seconds} seconde${seconds > 1 ? 's' : ''}`;
        }
    }

    /**
     * V√©rifie si le canal de logs est configur√© et accessible
     * @param {Guild} guild - Le serveur Discord
     * @returns {boolean} - True si le canal est accessible
     */
    static async isLogChannelAccessible(guild) {
        try {
            const guildConfig = await DatabaseManager.getGuildConfig(guild.id);
            if (!guildConfig || !guildConfig.logChannelId) {
                return false;
            }

            const logChannel = guild.channels.cache.get(guildConfig.logChannelId);
            return logChannel && logChannel.isTextBased();
        } catch (error) {
            return false;
        }
    }
}

module.exports = Logger;